<snippet>
	<content><![CDATA[
vector<vector<int>> adj,cc;
vector<pair<int,int>> bridges;
vector<int> color,visited,time_in,time_out,parent,low,cutpoints,subtreesz,centroid,height,first_,euler;
int dfs_timer=0;

struct DFS{  
    // clear and resize
    void init(int n){
        dfs_timer=0;
        cc.clear();
        bridges.clear();
        cutpoints.clear();
        centroid.clear();
        euler.clear();
        height.clear();height.resize(n+1,0);
        first_.clear();first_.resize(n+1,-1);
        subtreesz.clear();subtreesz.resize(n+1);
        adj.clear();adj.resize(n+1);
        color.clear();color.resize(n+1,0);
        parent.clear();parent.resize(n+1,0);
        visited.clear();visited.resize(n+1,0);
        low.clear();low.resize(n+1,-1);
        time_in.clear();time_in.resize(n+1,-1);
        time_out.clear();time_out.resize(n+1,-1);
    }

    void add(int u,int v){
        adj[u].pb(v);
        adj[v].pb(u);
    }

    // takes unvisited node and current component
    // visits all nodes and marks them with same component
    // color 0 - unvisited
    // color 1 - currently visiting
    // color 2 - exited
    // stores bridges

    void dfs(int node,int comp,int n,int par=-1){
        visited[node]=comp;
        time_in[node]=low[node]=dfs_timer++;
        color[node]=1;
        int children=0;
        subtreesz[node]=1;
        first_[node]=euler.size();
        euler.push_back(node); 
        for(auto child:adj[node]){
            if(child==par)continue;
            if(visited[child]){
                low[node]=min(low[node],time_in[child]);
            }else{
                parent[child]=node;
                height[child]=height[node]+1;
                dfs(child,comp,n,node);
                euler.push_back(node);
                subtreesz[node]+=subtreesz[child];
                low[node]=min(low[node],low[child]);
                /* Stores Bridges */
                if(low[child]>time_in[node]){
                    bridges.pb({node,child});
                }
                /* Stores Articulation Points */
                if(low[child]>=time_in[node] and par!=-1){
                    cutpoints.pb(node);
                }
                children++;
            }
        }
        /*Stores Centroid*/
        bool iscentroid = true;
        for(auto v:adj[node]){
            if(v!=par and subtreesz[v]>n/2)
                iscentroid=false;
        }
        // parent of node may have subtreesz[parent] >n/2 
        if(n-subtreesz[node]>n/2) iscentroid=false;
        if(iscentroid) centroid.push_back(node);
        /*  Stores Cutpoints   */
        if(par==-1 and children>1){
            cutpoints.pb(node);
        }
        color[node]=2;
        time_out[node]=dfs_timer++;
    }

    /*
    int comp=0;   
    for(int i=1;i<=n;i++){
        if(visited[i]==0){
            comp++;
            dfs(i,comp);
        }
    }   
    cc.resize(comp+1);
    for(int i=1;i<=n;i++){
        cc[visited[i]].pb(i);
    }
    */


    // height[root]=0;
};

struct SEGTREE{

    struct node{
        int height;
        int vertex;
        node(int ht=INT_MAX,int v=-1){
            height=ht;
            vertex=v;
        }
    };

    int n;
    vector<pair<int,int>> arr;
    vector<node> treee;
    void init(int N){
        n = N;
        arr.clear();arr.resize(n);
        treee.clear();treee.resize(4*n);
    }

    node merge(node a,node b){
        if(a.height<b.height)return a;
        return b;
    }


    void build(int index,int l,int r){
        if(l==r){
            // update leaf
            treee[index]=node(arr[l].first,arr[l].second);
            return;
        }
        int mid=(l+r)/2;
        build(2*index,l,mid);
        build(2*index+1,mid+1,r);
        treee[index]=merge(treee[2*index],treee[2*index+1]);
    }


    void update(int index,int l,int r,int pos,int val){
        if(pos>r or pos<l)return;
        if(l==r){
            // update leaf
            treee[index]=node(val,pos);
            return;
        }

        int mid=(l+r)/2;
        update(2*index,l,mid,pos,val);
        update(2*index+1,mid+1,r,pos,val);
        treee[index]=merge(treee[2*index],treee[2*index+1]);
    }

    node query(int index,int l,int r,int lq,int rq){
        if(lq<=l and r<=rq){
            return treee[index];
        }
        if(lq>r or rq<l){
            // return not possible value
            return node();
        
        }
        int mid=(l+r)/2;
        return merge(query(2*index,l,mid,lq,rq),query(2*index+1,mid+1,r,lq,rq));
    }

    void print(){
        // loop(i,0,n)cout<<arr[i]<<sp;
        cout<<endl;
        loop(i,0,2*n+2){
            ;
        }
        cout<<endl;
    }
};

void solve()
{
    take(n)
    DFS graph;
    graph.init(n);
    int root=-1;

    graph.dfs(root,1,n);
    SEGTREE seg;
    seg.init(euler.size());
    int i=0;
    for(auto x:euler){
        seg.arr[i++] = {height[x],x};
    }
    seg.build(1,0,euler.size()-1);
    // lca = seq.query(1,0,euler.size()-1,first_[u],first_[v]).vertex    
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>lcasegtree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
