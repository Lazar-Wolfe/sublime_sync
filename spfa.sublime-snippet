<snippet>
	<content><![CDATA[
vector<vector<pair<int,int>>> adj;
vector<int> dist,parent,path,negcycle;

void init(int n){
    path.clear();
    negcycle.clear();
    adj.clear();adj.resize(n+1);
    dist.clear();dist.resize(n+1,INT_MAX);
    parent.clear();parent.resize(n+1,-1);
}

void negative_cycle(int x,int n){
    int y = x;
    for (int i = 0; i < n; ++i){
        y = parent[y];
    }
    cout << "Negative cycle exists: ";
    for (int cur = y;; cur = parent[cur]) {
        negcycle.push_back(cur);
        if (cur == y && negcycle.size() > 1){
            break;
        }
    }
    reverse(negcycle.begin(), negcycle.end());
    for(int i=0;i<negcycle.size()-1;i++){
        cout<<negcycle[i]<<"-->";
    }
    cout<<negcycle.back()<<endl;
}

// takes source
// fills distance, parent
// returns 1 if negative cycle is present, else 0
bool spfa(int source){
    int n = adj.size();
    vector<int> cnt(n+1,0),inqueue(n+1,0);
    queue<int> q;
    dist[source]=0;
    q.push(source);
    inqueue[source]=1;
    while(!q.empty()){
        int v = q.front();
        q.pop();
        inqueue[v]=0;
        for(auto edge:adj[v]){
            int neigh = edge.first;
            int cost = edge.second;
            if(dist[v]+cost<dist[neigh]){
                dist[neigh]=dist[v]+cost;
                parent[neigh]=v;
                if(!inqueue[neigh]){
                    q.push(neigh);
                    inqueue[neigh]=1;
                    cnt[neigh]++;
                    if(cnt[neigh]>n){
                        negative_cycle(neigh,n);
                        return true; // negative cycle
                    }
                }
            }
        }
    }
    return false; // no negative cycle
}

void print_path(int source,int destination){
    path.clear();
    if (dist[destination] == INT_MAX){
        cout << "No path from " << source << " to " << destination << "."<<endl;
    }
    else {
        for (int cur = destination; cur != -1; cur = parent[cur]){
            path.push_back(cur);
        }
        reverse(path.begin(), path.end());
        for(int i=0;i<path.size()-1;i++){
            cout << path[i] << "-->";
        }
        cout<<path.back()<<endl;
    }
}

// Store in adj list with adj[a].pb({b,c}); edge from a->b with weigth c
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>spfaa</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
