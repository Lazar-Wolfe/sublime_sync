<snippet>
	<content><![CDATA[
struct Edge{
    int a,b,cost;
    Edge(int a,int b,int cost):a(a),b(b),cost(cost){}
};
vector<Edge> edges;
vector<int> dist,parent,path,negcycle;

void init(int n){
    edges.clear();
    path.clear();
    negcycle.clear();
    dist.clear();dist.resize(n+1,INT_MAX);
    parent.clear();parent.resize(n+1,-1);
}

// prints and stores negative cycle in negcycle
void negative_cycle(int x,int n){
    int y = x;
    for (int i = 0; i < n; ++i){
        y = parent[y];
    }
    cout << "Negative cycle exists: ";
    for (int cur = y;; cur = parent[cur]) {
        negcycle.push_back(cur);
        if (cur == y && negcycle.size() > 1){
            break;
        }
    }
    reverse(negcycle.begin(), negcycle.end());
    for(int i=0;i<negcycle.size()-1;i++){
        cout<<negcycle[i]<<"-->";
    }
    cout<<negcycle.back()<<endl;
}

// takes start and number of nodes
// fills parent and dist array
// returns 1 if negative cycle exists else 0
bool bellmanford(int source,int n){
    dist[source] = 0;   
    int x;
    for (int i = 0; i < n; ++i) {
        x = -1;
        for(Edge e:edges){
            if (dist[e.a] < INT_MAX)
                if (dist[e.b] > dist[e.a] + e.cost) {
                    dist[e.b] = dist[e.a] + e.cost;
                    parent[e.b]=e.a;
                    x=e.b;
                }
        }
    }
    if(x==-1)return false; // no negative cycle
    negative_cycle(x,n);
    return true;
}


void print_path(int source,int destination){
    path.clear();
    if (dist[destination] == INT_MAX){
        cout << "No path from " << source << " to " << destination << "."<<endl;
    }
    else {
        for (int cur = destination; cur != -1; cur = parent[cur]){
            path.push_back(cur);
        }
        reverse(path.begin(), path.end());
        for(int i=0;i<path.size()-1;i++){
            cout << path[i] << "-->";
        }
        cout<<path.back()<<endl;
    }
}

// Store DIRECTED edges as a->b with weight c
// edges.push_back(Edge(a,b,c));
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>bellmanford</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
