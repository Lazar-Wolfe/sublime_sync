<snippet>
  <content><![CDATA[
vector<vector<int>> adj;
vector<int> dist,parent,visited;

void init(int n){
    adj.clear();adj.resize(n+1);
    dist.clear();dist.resize(n+1,-1);
    parent.clear();parent.resize(n+1,-1);
    visited.clear();visited.resize(n+1,0);
}
void init2(int n){
    dist.clear();dist.resize(n+1,-1);
    parent.clear();parent.resize(n+1,-1);
    visited.clear();visited.resize(n+1,0);
}
// takes visited,parent,source,destination
// prints path from source to destination
void path(int source,int destination){
    if(!visited[destination]){
        cout<<"No path"<<endl;
        return;
    }
    vector<int> path;
    for(int v=destination;v!=-1;v=parent[v]){
        path.push_back(v);
    }
    reverse(path.begin(),path.end());
    for(auto x:path){
        cout<<x<<sp;
    }
    cout<<endl;
}


// takes number of nodes and start node
// returns min dist, if dist is -1 then unvisited
void bfs(int n,int source){
    queue<int> q;
    q.push(source);
    visited[source]=true;
    parent[source]=-1;
    while(!q.empty()){
        int node = q.front();
        q.pop();
        for(auto child:adj[node]){
            if(!visited[child]){
                visited[child]=true;
                q.push(child);
                dist[child]=dist[node]+1;
                parent[child]=node;
            }
        }
    }
    // int destination;
    // path(visited,par,source,destination);
}
]]></content>
  <tabTrigger>bfs</tabTrigger>
  <description></description>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <!-- <scope >source.python</scope > -->
</snippet>