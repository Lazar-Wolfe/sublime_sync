<snippet>
  <content><![CDATA[
vector<vector<int>> adj; // adjacency list representation
    int n,s; // number of nodes and source vertex
    queue<int> q;
    vector<bool> visited(n,false);
    vector<int> d(n),p(n); // distance and parents
    // INITIALIZATION
    q.push(s); // push source in the queue 
    visited[s]=true;
    p[s]=-1;

    while(!q.empty()){
    	int v=q.front(); //take node from open list
    	q.pop(); // remove node 
    	for(int u:adj[v]){ //for neighbours of node if not visited
			if(visited[u]==false){
    			visited[u]=true;
    			q.push(u); //add nodes to open list
    			d[u]=d[v]+1; //adding distance in unweighted graph
    			p[u]=v; //set parent
			}    		
    	}
    }
    //DISPLAY SHORTED PATH FROM SOURCE TO VERTEX U
    if(visited[u]==false){
    	cout<<"NO PATH"<<endl;
    }else{
    	vector<int> path;
    	for(int v=u;v!=-1;v=p[v]){ //while root vertex not reached
    		path.push_back(v);
    	}
    	reverse(path.begin(),path.end());
    	cout<<"PATH : ";
    	for(int v:path){
    		cout<<v<<" ";
    	}
    	cout<<endl;
    }
]]></content>
  <tabTrigger>bfs</tabTrigger>
  <description></description>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <!-- <scope >source.python</scope > -->
</snippet>