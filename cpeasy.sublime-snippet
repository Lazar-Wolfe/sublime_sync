<snippet>
  <content><![CDATA[
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx2,bmi,bmi2,lzcnt,popcnt")
#include <bits/stdc++.h>
 
using namespace std;
typedef long long ll;
#define int long long int
#define loop(i, b, e) for (__typeof(e) i = (b) - ((b) > (e)); i != (e) - ((b) > (e)); i += 1 - 2 * ((b) > (e)))
#define vi vector<int>
#define vec(a,n) vi a(n);loop(i,0,n) cin>>a[i];
#define endl "\n"
#define pb push_back
#define sort_(a) sort(a.begin(),a.end());
#define sort__(a) sort(a.begin(),a.end());reverse(a.begin(),a.end());
#define all(a) a.begin(),a.end()
const int mod = 1e9 + 7;
#define take(n) int n; cin >> n;
#define sp " "
#define google(y) cout<<"Case #"<<y++<<": ";
#define finish(i){cout<<i<<endl;return;}


#ifdef LAZARWOLFE
#include "algo/debugger.h"
#else
#define cerr if(false)cerr
#define track(args...)
#endif


bool sortbysec(const pair<int,int> &a,const pair<int,int> &b)
{return (a.second < b.second);}
template<typename ...Args>
void Read(Args&... args) {
    (cin >> ... >> args);
}
#define read_ints(...) int __VA_ARGS__; Read(__VA_ARGS__);

mt19937_64 rng(std::chrono::steady_clock::now().time_since_epoch().count());

void solve()
{
    
}
 
int32_t main()
{
    auto begin = std::chrono::high_resolution_clock::now();
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    #ifdef LAZARWOLFE
    // NAIVE SOLUTION CHECKER
    // g++ -g a.cpp && gdb a.out core
    // freopen("algo/testin.txt","r",stdin);
    freopen("algo/input.txt","r",stdin);
    freopen("algo/output.txt","w",stdout);
    #endif
    int test_cases=1;
    cin >> test_cases;
    int i=test_cases;
    while (test_cases--)
    {
        track(i-test_cases);
        solve();
    }
    auto end = std::chrono::high_resolution_clock::now();
    cerr << setprecision(4) << fixed;
    cerr << "Execution time: " << std::chrono::duration_cast<std::chrono::duration<double>>(end - begin).count() << " seconds" << endl;
    return 0;
}
]]></content>
  <tabTrigger>cpeasy</tabTrigger>
  <description></description>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <!-- <scope >source.python</scope > -->
</snippet>
